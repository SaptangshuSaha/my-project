REACT CHAT APP WITH AXIOS & WEBSOCKETS (EXP7.2) FUNCTIONALITY, STYLING & JAVASCRIPT CONCEPTS OVERVIEW

1. FEATURE: Real-Time Chat
- Users can send and receive messages instantly without refreshing the page.
- Messages are stored on the backend using REST API (/api/messages) and broadcasted via WebSocket (Socket.io).
- Supports multiple users in real-time.
- Each message includes: user name, text, timestamp, and unique ID.

2. PAGE STRUCTURE (HTML/JSX Overview)
- Container <div> wraps chat window, message list, and input box.
- Scrollable message display area (<div>).
- Input field (<input> or <textarea>) for typing messages.
- Send button to post messages.
- Optional Disconnect button to disconnect WebSocket connection.

3. CSS LAYOUT
- Chat window has fixed height with scrollable message area.
- Messages displayed in vertical list.
- Input area placed at the bottom.
- Responsive layout: chat container and input field resize with screen width.

4. COLOR SCHEME & STYLING NOTES
Default Light Mode:
- Chat background: white
- Message bubble background: light gray
- Text color: black
- Borders: subtle gray lines

Styling Notes:
- Scrollbar styled for readability.
- Messages separated by margin for clarity.
- Input box width: 100% for responsiveness.
- Send button styled for visibility.

5. JAVASCRIPT / REACT CONCEPTS USED
- React State Management: useState to manage messages and input text.
- Effect Hooks: useEffect for fetching messages and WebSocket listeners.
- Axios HTTP Requests: axios.get() to fetch message history, axios.post() to send new messages.
- WebSocket (Socket.io): io() to connect, socket.on() to listen, socket.emit() to send.
- DOM Updates: React re-renders messages when state updates.
- Event Handling: onChange for input, onClick for Send button.
- Real-time Interactivity: New messages appear instantly on all clients.
- Cleanup: socket.disconnect() on component unmount.

6. TEST CASE DISTRIBUTION

Test Case ID | Input / Action                        | Expected Output                          | Notes
-----------------------------------------------------------------------------------------------
TC-1         | Load page                             | Message list shows existing messages     | Initial state
TC-2         | Type "Hello" and click Send           | Message "Hello" appears in chat          | Single user
TC-3         | Open second tab and send "Hi there"  | Both tabs show "Hi there" instantly      | Real-time WebSocket
TC-4         | Send empty message                    | Error or no message added                | Validation
TC-5         | Post message with user name "Ritik"  | Message shows user: "Ritik"             | User field optional
TC-6         | Disconnect WebSocket                  | No messages received after this          | Manual disconnect
TC-7         | Reconnect WebSocket                   | New messages start appearing             | Reconnect functionality
TC-8         | Send multiple messages quickly        | All messages appear in order             | Stress test

7. LEARNING OUTCOMES
1. Integrate Axios for REST API communication in React.
2. Implement real-time chat using WebSockets (Socket.io).
3. Manage live DOM updates with React state and hooks.
4. Handle multiple users and broadcast messages in real-time.
5. Style responsive chat UIs with CSS.
6. Handle input validation and WebSocket connections.
7. Understand frontend-backend interaction for dynamic apps.
